from swarm import Swarm, Agent
from dotenv import load_dotenv
import json
import os

load_dotenv()
client = Swarm()


# Given the prompt and the topic, replace all {topic} values with the value topic
def get_prompt(topic, prompt):
    return prompt.replace("{topic}", topic)


# Retrieve the script file generated by the LLM
def get_script(topic, instructions, prompt):
    expert = Agent(
        name='expert',
        instructions=instructions,
        model='gpt-4o'
    )

    response = client.run(
        agent=expert,
        messages=[{"role":"user", "content": get_prompt(topic, prompt)}]
    )

    json_content = response.messages[-1]["content"]
    if json_content.startswith('```json'):
        json_content = json_content.strip('```json').strip()
    if json_content.endswith('```'):
        json_content = json_content.strip('```').strip()
    print(json_content)
    return json.loads(json_content)

# Check to see if the script exists, if it doesn't, generate and save it. Return the JSON of the content
def do_script_file(subject, script_file, instructions, prompt):
    if not os.path.exists(script_file):
        script = get_script(subject, instructions, prompt)
        with open(script_file, 'w') as json_file:
            json.dump(script, json_file, indent=4)
    with open(script_file, 'r') as file:
        data = json.load(file)
    return data


# Given the script.json content, ask the LLM to generate a description of the video that can be used as a summary
def generate_description(narrations, instructions):
    val = ''

    for narration in narrations:
        val += ' ' + narration

    expert = Agent(
        name='expert',
        instructions=instructions,
        model='gpt-4o'
    )

    response = client.run(
        agent=expert,
        messages=[{"role":"user",
                   "content": f"Given the script: '{val}', summarize the content for a YouTube description. Make it short."}]
    )

    description = response.messages[-1]["content"]
    return description
